//????????1.???? ?????? ??????? BankAccount ??????? ??????. BankAccount?? ???(balance)?? ??????? ??? ?????? ?????? ????? ??????? deposit()?? ????? ??????? withdraw()?? ??? ????? ??????.
//??? ????? ??????, ??????, ??????? ??????. withdraw()?????? ???? ????? ?????? ??? NegativeBalance??? ????? ????? ???????? ???. NegativeBalance?? ?????? ??????? ???????.
//BankAccount ????? main()????? ????????? ???????. try/catch???? ???????? ????? ???????? ???.

#include <iostream>
using namespace std;

class NegativeBalance
{
private:
    int amount;
    int balance;

public:
    NegativeBalance();
    NegativeBalance(int a, int balance) { 
        amount = a;
        this->balance = balance; 
     };
    int get_balance() { return balance; };

    void print(){
        cerr<<"�ܾ��� �����մϴ�. "<<amount<<"�ʰ�"<<endl;
        cerr<<"���� �ܾ� : "<<balance<<endl;
    }
};

class BankAccount
{
private:
    int balance;

public:
    void setBalance(int amount);
    int getBalance();
    void deposit(int amount);
    int withdraw(int amount);
    void print();
};

void BankAccount::setBalance(int amount)
{
    balance = amount;
}

int BankAccount::getBalance()
{
    return balance;
}

void BankAccount::deposit(int amount)
{
    balance += amount;
}

int BankAccount::withdraw(int amount)
{
    try
    {
        if (balance - amount < 0)
            throw NegativeBalance(balance - amount, balance);
    }
    catch (NegativeBalance e)
    {
        e.print();
    }

    return balance -= amount;
}
void BankAccount::print()
{
    cout << "???? ????? : " << balance << endl;
}

int main()
{
    BankAccount b;
    int amount;
    int balance;

    cout << "잔액 : ";
    cin >> balance;
    cout << endl;
    cout << "인출 : ";
    cin >> amount;

    b.setBalance(balance);
    b.withdraw(amount);
    b.print();

    return 0;
}
